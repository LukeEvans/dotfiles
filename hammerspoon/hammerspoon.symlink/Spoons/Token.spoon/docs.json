[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "def" : "Token.logger",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "notes" : [

        ],
        "signature" : "Token.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation",
        "def" : "Token.secret_key",
        "stripped_doc" : [
          "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation"
        ],
        "desc" : "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation",
        "notes" : [

        ],
        "signature" : "Token.secret_key",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "secret_key",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "type" : "Module",
    "desc" : "generate google authenticator token value keystrokes",
    "Deprecated" : [

    ],
    "Constructor" : [

    ],
    "doc" : "generate google authenticator token value keystrokes\nRetrieve a google authenticator token seed from keychain and use this to calculate the current value\nSimulate keystrokes for this token value\n\nwritten by Teun Vink <github@teun.tv>, converted to spoon by Tyler Thrailkill <snowe>\n\nhttps:\/\/github.com\/teunvink\/hammerspoon",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "def" : "Token.logger",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "notes" : [

        ],
        "signature" : "Token.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation",
        "def" : "Token.secret_key",
        "stripped_doc" : [
          "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation"
        ],
        "desc" : "String indicating the Keychain name of the Shared Key used in the OTP HMAC-SHA1 generation",
        "notes" : [

        ],
        "signature" : "Token.secret_key",
        "type" : "Variable",
        "returns" : [

        ],
        "name" : "secret_key",
        "parameters" : [

        ]
      },
      {
        "doc" : "Binds hotkeys for Token\n\nParameters:\n * mapping - A table containing hotkey modifier\/key details for the following items:\n  * generate - generate and type token",
        "def" : "Token:bindHotkeys(mapping)",
        "stripped_doc" : [
          "Binds hotkeys for Token",
          ""
        ],
        "desc" : "Binds hotkeys for Token",
        "notes" : [

        ],
        "signature" : "Token:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "bindHotkeys",
        "parameters" : [
          " * mapping - A table containing hotkey modifier\/key details for the following items:",
          "  * generate - generate and type token"
        ]
      },
      {
        "doc" : "Retrieves the token using an HOTP\/TOTP Secret Key stored in the keychain",
        "def" : "Token:get_token()",
        "stripped_doc" : [
          "Retrieves the token using an HOTP\/TOTP Secret Key stored in the keychain"
        ],
        "desc" : "Retrieves the token using an HOTP\/TOTP Secret Key stored in the keychain",
        "notes" : [

        ],
        "signature" : "Token:get_token()",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "get_token",
        "parameters" : [

        ]
      },
      {
        "doc" : "read a token secret key from keychain, generate a code and make keystrokes for it",
        "def" : "Token:token_keystroke()",
        "stripped_doc" : [
          "read a token secret key from keychain, generate a code and make keystrokes for it"
        ],
        "desc" : "read a token secret key from keychain, generate a code and make keystrokes for it",
        "notes" : [

        ],
        "signature" : "Token:token_keystroke()",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "token_keystroke",
        "parameters" : [

        ]
      }
    ],
    "Method" : [
      {
        "doc" : "read a token secret key from keychain, generate a code and make keystrokes for it",
        "def" : "Token:token_keystroke()",
        "stripped_doc" : [
          "read a token secret key from keychain, generate a code and make keystrokes for it"
        ],
        "desc" : "read a token secret key from keychain, generate a code and make keystrokes for it",
        "notes" : [

        ],
        "signature" : "Token:token_keystroke()",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "token_keystroke",
        "parameters" : [

        ]
      },
      {
        "doc" : "Retrieves the token using an HOTP\/TOTP Secret Key stored in the keychain",
        "def" : "Token:get_token()",
        "stripped_doc" : [
          "Retrieves the token using an HOTP\/TOTP Secret Key stored in the keychain"
        ],
        "desc" : "Retrieves the token using an HOTP\/TOTP Secret Key stored in the keychain",
        "notes" : [

        ],
        "signature" : "Token:get_token()",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "get_token",
        "parameters" : [

        ]
      },
      {
        "doc" : "Binds hotkeys for Token\n\nParameters:\n * mapping - A table containing hotkey modifier\/key details for the following items:\n  * generate - generate and type token",
        "def" : "Token:bindHotkeys(mapping)",
        "stripped_doc" : [
          "Binds hotkeys for Token",
          ""
        ],
        "desc" : "Binds hotkeys for Token",
        "notes" : [

        ],
        "signature" : "Token:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [

        ],
        "name" : "bindHotkeys",
        "parameters" : [
          " * mapping - A table containing hotkey modifier\/key details for the following items:",
          "  * generate - generate and type token"
        ]
      }
    ],
    "name" : "Token"
  }
]